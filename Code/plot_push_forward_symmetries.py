#=================================================================================
#=================================================================================
# Script:"plot_phase_plane_symmetries"
# Date: 2022-07-12
# Implemented by: Johannes Borgqvist
# Description:
# The script plots all the phase plane symmetries of the LV-model, the SIR-model,
# the linear model and the biological oscillator.
#=================================================================================
#=================================================================================
#=================================================================================
#=================================================================================
# Import Libraries
#=================================================================================
#=================================================================================
from symmetry_toolbox import *
import autograd.numpy as np
from autograd import jacobian
from scipy.integrate import quad
#=================================================================================
#=================================================================================
# Plot the solutions
#=================================================================================
#=================================================================================
# Define the time vector and the initial conditions
t = linspace(0, 20, 500)              # time
X0 = array([0.30, 0.10])                     # initials conditions: 10 rabbits and 5 foxes
# Solve the ODE at hand
X1, infodict = integrate.odeint(dX_dt_LV, X0, t, args = (1,),full_output=True)
infodict['message'] # >>> 'Integration successful.'
# Split the solution into its component parts
u, v = X1.T
# Plot our lovely solutions
fig_1 = plt.figure(constrained_layout=True, figsize=(20, 8))
plt.plot(t, u, '-', label="Prey, $u(\\tau)$" ,color=(0/256,68/256,27/256),linewidth=3.0)
plt.plot(t, v  , '-', label='Predator, $v(\\tau)$',color=(77/256,0/256,75/256),linewidth=3.0)
plt.grid()
plt.legend(loc='best',prop={"size":20})
plt.xlabel(xlabel='Time, $\\tau$',fontsize=25)
plt.ylabel(ylabel='Population size',fontsize=25)
# Change the size of the ticks
plt.tick_params(axis='both', which='major', labelsize=20)
plt.tick_params(axis='both', which='minor', labelsize=20)
# Title and saving the figure
plt.title('Solutions of the Lotka-Volterra model',fontsize=30,weight='bold')
#plt.savefig('../Figures/LV_solutions.png')
#plt.show()

#=================================================================================
#=================================================================================
# Transform the u-component
#=================================================================================
#=================================================================================
#----------------------------------------------------------------------
# STEP 0: Allocate an epsilon vector
# Previous value of epsilon
epsilon_prev = 0
# Epsilon current
epsilon_curr = 0.05
# Value of alpha
alpha = 1
#----------------------------------------------------------------------
# STEP 1: Find the transformed solution curve
# Define new initial conditions
X0_u = array([u_transf(X0[0],epsilon_curr,alpha),X0[1]])
# Solve the ODE at hand
X2, infodict = integrate.odeint(dX_dt_LV, X0_u, t, args = (1,),full_output=True)
infodict['message'] # >>> 'Integration successful.'

# Split the solution into its component parts
u_transformed, v_2 = X2.T

def F(X):
    x, y = X
    return -y, -x * y

def r(t):
    return np.array([-np.sin(t), np.cos(t)])

drdt = jacobian(r)

def integrand(t):
    return F(r(t)) @ drdt(t)

I, e = quad(integrand, 0.0, np.pi / 2)
print(f'The integral is {I:1.4f}.')

#----------------------------------------------------------------------
# Plot our transformation
fig_2 = plt.figure(constrained_layout=True, figsize=(20, 8))
plt.plot(t, u, '-', label="$u(\\tau)$" ,color=(0/256,68/256,27/256),linewidth=3.0)
plt.plot(t, u_transformed  , '-', label='$\\hat{u}(\\tau)$',color=(65/256,174/256,118/256),linewidth=3.0)
plt.grid()
plt.legend(loc='best',prop={"size":20})
plt.xlabel(xlabel='Time, $\\tau$',fontsize=25)
plt.ylabel(ylabel='Population size',fontsize=25)
# Change the size of the ticks
plt.tick_params(axis='both', which='major', labelsize=20)
plt.tick_params(axis='both', which='minor', labelsize=20)
# Title and saving the figure
plt.title('Action of the symmetry generated by $X_{\\tau,u}$',fontsize=30,weight='bold')
#plt.savefig('../Figures/LV_solutions.png')
plt.show()



# SYMPY APPROACH TO CALCULATE LINE INTEGRALS
from sympy.vector import ImplicitRegion
from sympy.abc import u,v
from sympy import symbols



# Define Epsilon and H
H = 0.1
epsilon = 0.05
# Define an implicit region
implicit_circle = ImplicitRegion((u, v), alpha*u+v-log((u**alpha)*v)-(H+epsilon))
